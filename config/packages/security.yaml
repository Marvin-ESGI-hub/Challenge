security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    enable_authenticator_manager: true
    providers:
       app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true  # Assurez-vous que les utilisateurs sont chargés "paresseusement" quand ils sont nécessaires
            provider: app_user_provider  # Assurez-vous que le provider correspond à votre configuration
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_redirect
                enable_csrf: true
            logout:
                path: app_logout
                target: app_login
    
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_COMPANY: ROLE_USER
        ROLE_COMPTABLE: ROLE_USER

    access_control:
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/register$, roles: PUBLIC_ACCESS }
        - { path: ^/redirect, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/dashboard, roles: [ROLE_COMPANY, ROLE_COMPTABLE, ROLE_ADMIN] } 
        - { path: ^/, roles: PUBLIC_ACCESS }
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
